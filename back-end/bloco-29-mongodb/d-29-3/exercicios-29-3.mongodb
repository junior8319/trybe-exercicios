use cinema;
db.movies.drop();

use cinema;
db.movies.drop();
db.movies.insertMany([
  {
    title: "Batman",
    category: [
      "action",
      "adventure",
    ],
    imdbRating: 7.7,
    budget: 35,
    ratings: [ 85, 100, 102, 105 ],
    description: "The Dark Knight of Gotham City begins his war on crime with his first major enemy being Jack Napier, a criminal who becomes the clownishly homicidal Joker.",
  },
  {
    title: "Godzilla",
    category: [
      "action",
      "adventure",
      "sci-fi",
    ],
    imdbRating: 6.6,
    budget: 10,
    ratings: [ 78, 52, 95, 102 ],
    description: "The world is beset by the appearance of monstrous creatures, but one of them may be the only one who can save humanity.",
  },
  {
    title: "Home Alone",
    category: [
      "family",
      "comedy",
    ],
    imdbRating: 7.4,
    ratings: [ 200, 99, 65 ],
    description: "An eight-year-old troublemaker must protect his house from a pair of burglars when he is accidentally left home alone by his family during Christmas vacation.",
  },
  {
    title: "Matrix",
    category: [
      "sci-fi",
      "action",
    ],
    imdbRating: 8.7,
    budget: 15,
    ratings: [ 77, 92, 150, 180 ],
    description: "When a beautiful stranger leads computer hacker Neo to a forbidding underworld, he discovers the shocking truth--the life he knows is the elaborate deception of an evil cyber-intelligence.",
  },
  {
    title: "Pulp Fiction",
    category: [
      "crime",
      "drama",
    ],
    imdbRating: 8.9,
    budget: 8,
    ratings: [ 110, 84, 95, 90 ],
    description: "The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption."
  },
]);

show collections;

db.movies.find();
// exercício 1 com $all
db.movies.find({
  category: {
    $all: [
      "action",
      "adventure",
    ]
  }
});

// exercício 2 com $all
db.movies.find({
  category: {
    $all: ["action", "sci-fi"]
  },
  imdbRating: { $gt: 7 },
});

// exercício 3 com $elemMatch
db.movies.find(
  {
    ratings: { $elemMatch: { $gt: 103 } }
  },
  { _id: false, title: true, ratings: true },
).pretty();

// exercício 4 com $elemMatch, $gte e $lte
db.movies.find(
  {
    ratings: { $elemMatch: { $gte: 100, $lte: 105 } }
  },
  { _id: false, title: true, ratings: true },
).pretty();

// exercício 5 com $elemMatch, $mod, $gte e $lte
db.movies.find(
  {
    ratings: {
      $elemMatch: {
        $gte: 64,
        $lte: 105,
        $mod: [9, 0],
      },
    },
  },
  {
    _id: false,
    title: true,
    ratings: true,
  },
).pretty();

// exercício 6 com $elemMatch e $regex
db.movies.find(
  {
    category: { $regex: /^adventure/i },
    ratings: { $elemMatch: { $lt: 103 } },
  },
  {
    _id: false,
    title: true,
    ratings: true,
    category: true,
  },
).pretty();

// exercício 7 com $size
db.movies.find(
  {
    category: { $size: 2 },
  },
  {
    _id: false,
    title: true,
  },
).pretty();

// exercício 8 com $size
db.movies.find(
  {
    ratings: { $size: 4 },
  },
  {
    _id: false,
    title: true,
    ratings: true,
  },
).pretty();

// exercício 9 com $and, $size, e $mod
db.movies.find(
  {
    $and: [
      { budget: { $mod: [5, 0] } },
      { category: { $size: 2 } },
    ],
  },
  {
    _id: false,
  },
);

// exercício 10, minha solução ($or, $regex, $gt)
db.movies.find(
  {
    $or: [
      { category: { $regex: /^sci-fi/i } },
      { ratings: { $gt: 199 } },
    ],
  },
  {
    _id: false,
    title: true,
    ratings: true,
    category: true,
  },
);

// exercício 10, solução do gabarito ($or, $all e $elemMatch)
db.movies.find(
  {
    $or: [
      { category: { $all: ["sci-fi"] } },
      { ratings: { $elemMatch: { $gt: 199 } } }
    ]
  },
  { _id: 0, title: 1, ratings: 1, category: 1 }
);

// exercício 12, $regex
db.movies.find({ description: { $regex: /^The/i } }).pretty();

// exercício 13, $regex
db.movies.find({ description: { $regex: /humanity.$/i } }).pretty();
